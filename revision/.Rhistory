filter(date <= start.fcast.date + months(12)) %>%
select(-date, -country, -d_2011, -d_2012, -d_2013),
burn = n.burn, iter = n.iter, g = "BRIC", mprior = "random",
nmodel = 10000, mcmc = "bd", user.int = F, randomizeTimer = F,
fixed.reg = c(year_dummy_names[-c(10,11,12)], country_dummy_names))
# Up to 2011 data
bma.model.synch.levels.6 = bms(synch_levels_data %>%
mutate(date = as.Date(date)) %>%
filter(date <= start.fcast.date + months(15)) %>%
select(-date, -country, -d_2012, -d_2013),
burn = n.burn, iter = n.iter, g = "BRIC", mprior = "random",
nmodel = 10000, mcmc = "bd", user.int = F, randomizeTimer = F,
fixed.reg = c(year_dummy_names[-c(11,12)], country_dummy_names))
bma.model.synch.levels.7 = bms(synch_levels_data %>%
mutate(date = as.Date(date)) %>%
filter(date <= start.fcast.date + months(18)) %>%
select(-date, -country, -d_2012, -d_2013),
burn = n.burn, iter = n.iter, g = "BRIC", mprior = "random",
nmodel = 10000, mcmc = "bd", user.int = F, randomizeTimer = F,
fixed.reg = c(year_dummy_names[-c(11,12)], country_dummy_names))
bma.model.synch.levels.8 = bms(synch_levels_data %>%
mutate(date = as.Date(date)) %>%
filter(date <= start.fcast.date + months(21)) %>%
select(-date, -country, -d_2012, -d_2013),
burn = n.burn, iter = n.iter, g = "BRIC", mprior = "random",
nmodel = 10000, mcmc = "bd", user.int = F, randomizeTimer = F,
fixed.reg = c(year_dummy_names[-c(11,12)], country_dummy_names))
bma.model.synch.levels.9 = bms(synch_levels_data %>%
mutate(date = as.Date(date)) %>%
filter(date <= start.fcast.date + months(24)) %>%
select(-date, -country, -d_2012, -d_2013),
burn = n.burn, iter = n.iter, g = "BRIC", mprior = "random",
nmodel = 10000, mcmc = "bd", user.int = F, randomizeTimer = F,
fixed.reg = c(year_dummy_names[-c(11,12)], country_dummy_names))
# Up to 2012 data
bma.model.synch.levels.10 = bms(synch_levels_data %>%
mutate(date = as.Date(date)) %>%
filter(date <= start.fcast.date + months(27)) %>%
select(-date, -country, -d_2013),
burn = n.burn, iter = n.iter, g = "BRIC", mprior = "random",
nmodel = 10000, mcmc = "bd", user.int = F, randomizeTimer = F,
fixed.reg = c(year_dummy_names[-c(12)], country_dummy_names))
bma.model.synch.levels.11 = bms(synch_levels_data %>%
mutate(date = as.Date(date)) %>%
filter(date <= start.fcast.date + months(30)) %>%
select(-date, -country, -d_2013),
burn = n.burn, iter = n.iter, g = "BRIC", mprior = "random",
nmodel = 10000, mcmc = "bd", user.int = F, randomizeTimer = F,
fixed.reg = c(year_dummy_names[-c(12)], country_dummy_names))
bma.model.synch.levels.12 = bms(synch_levels_data %>%
mutate(date = as.Date(date)) %>%
filter(date <= start.fcast.date + months(33)) %>%
select(-date, -country, -d_2013),
burn = n.burn, iter = n.iter, g = "BRIC", mprior = "random",
nmodel = 10000, mcmc = "bd", user.int = F, randomizeTimer = F,
fixed.reg = c(year_dummy_names[-c(12)], country_dummy_names))
bma.model.synch.levels.13 = bms(synch_levels_data %>%
mutate(date = as.Date(date)) %>%
filter(date <= start.fcast.date + months(36)) %>%
select(-date, -country, -d_2013),
burn = n.burn, iter = n.iter, g = "BRIC", mprior = "random",
nmodel = 10000, mcmc = "bd", user.int = F, randomizeTimer = F,
fixed.reg = c(year_dummy_names[-c(12)], country_dummy_names))
# Up to 2013 data
bma.model.synch.levels.14 = bms(synch_levels_data %>%
mutate(date = as.Date(date)) %>%
filter(date <= start.fcast.date + months(39)) %>%
select(-date, -country),
burn = n.burn, iter = n.iter, g = "BRIC", mprior = "random",
nmodel = 10000, mcmc = "bd", user.int = F, randomizeTimer = F,
fixed.reg = c(year_dummy_names, country_dummy_names))
bma.model.synch.levels.15 = bms(synch_levels_data %>%
mutate(date = as.Date(date)) %>%
filter(date <= start.fcast.date + months(42)) %>%
select(-date, -country),
burn = n.burn, iter = n.iter, g = "BRIC", mprior = "random",
nmodel = 10000, mcmc = "bd", user.int = F, randomizeTimer = F,
fixed.reg = c(year_dummy_names, country_dummy_names))
bma.model.synch.levels.16 = bms(synch_levels_data %>%
mutate(date = as.Date(date)) %>%
filter(date <= start.fcast.date + months(45)) %>%
select(-date, -country),
burn = n.burn, iter = n.iter, g = "BRIC", mprior = "random",
nmodel = 10000, mcmc = "bd", user.int = F, randomizeTimer = F,
fixed.reg = c(year_dummy_names, country_dummy_names))
# SYNCH-SYNCH (16 models) #
# Up to 2009 data
bma.model.synch.synch.1 = bms(synch_synch_data %>%
mutate(date = as.Date(date)) %>%
filter(date <= start.fcast.date) %>%
select(-date, -country, -d_2010, -d_2011, -d_2012, -d_2013),
burn = n.burn, iter = n.iter, g = "BRIC", mprior = "random",
nmodel = 10000, mcmc = "bd", user.int = F, randomizeTimer = F,
fixed.reg = c(year_dummy_names[-c(9,10,11,12)], country_dummy_names))
# Up to 2010 data
bma.model.synch.synch.2 = bms(synch_synch_data %>%
mutate(date = as.Date(date)) %>%
filter(date <= start.fcast.date + months(3)) %>%
select(-date, -country, -d_2011, -d_2012, -d_2013),
burn = n.burn, iter = n.iter, g = "BRIC", mprior = "random",
nmodel = 10000, mcmc = "bd", user.int = F, randomizeTimer = F,
fixed.reg = c(year_dummy_names[-c(10,11,12)], country_dummy_names))
bma.model.synch.synch.3 = bms(synch_synch_data %>%
mutate(date = as.Date(date)) %>%
filter(date <= start.fcast.date + months(6)) %>%
select(-date, -country, -d_2011, -d_2012, -d_2013),
burn = n.burn, iter = n.iter, g = "BRIC", mprior = "random",
nmodel = 10000, mcmc = "bd", user.int = F, randomizeTimer = F,
fixed.reg = c(year_dummy_names[-c(10,11,12)], country_dummy_names))
bma.model.synch.synch.4 = bms(synch_synch_data %>%
mutate(date = as.Date(date)) %>%
filter(date <= start.fcast.date + months(9)) %>%
select(-date, -country, -d_2011, -d_2012, -d_2013),
burn = n.burn, iter = n.iter, g = "BRIC", mprior = "random",
nmodel = 10000, mcmc = "bd", user.int = F, randomizeTimer = F,
fixed.reg = c(year_dummy_names[-c(10,11,12)], country_dummy_names))
bma.model.synch.synch.5 = bms(synch_synch_data %>%
mutate(date = as.Date(date)) %>%
filter(date <= start.fcast.date + months(12)) %>%
select(-date, -country, -d_2011, -d_2012, -d_2013),
burn = n.burn, iter = n.iter, g = "BRIC", mprior = "random",
nmodel = 10000, mcmc = "bd", user.int = F, randomizeTimer = F,
fixed.reg = c(year_dummy_names[-c(10,11,12)], country_dummy_names))
# Up to 2011 data
bma.model.synch.synch.6 = bms(synch_synch_data %>%
mutate(date = as.Date(date)) %>%
filter(date <= start.fcast.date + months(15)) %>%
select(-date, -country, -d_2012, -d_2013),
burn = n.burn, iter = n.iter, g = "BRIC", mprior = "random",
nmodel = 10000, mcmc = "bd", user.int = F, randomizeTimer = F,
fixed.reg = c(year_dummy_names[-c(11,12)], country_dummy_names))
bma.model.synch.synch.7 = bms(synch_synch_data %>%
mutate(date = as.Date(date)) %>%
filter(date <= start.fcast.date + months(18)) %>%
select(-date, -country, -d_2012, -d_2013),
burn = n.burn, iter = n.iter, g = "BRIC", mprior = "random",
nmodel = 10000, mcmc = "bd", user.int = F, randomizeTimer = F,
fixed.reg = c(year_dummy_names[-c(11,12)], country_dummy_names))
bma.model.synch.synch.8 = bms(synch_synch_data %>%
mutate(date = as.Date(date)) %>%
filter(date <= start.fcast.date + months(21)) %>%
select(-date, -country, -d_2012, -d_2013),
burn = n.burn, iter = n.iter, g = "BRIC", mprior = "random",
nmodel = 10000, mcmc = "bd", user.int = F, randomizeTimer = F,
fixed.reg = c(year_dummy_names[-c(11,12)], country_dummy_names))
bma.model.synch.synch.9 = bms(synch_synch_data %>%
mutate(date = as.Date(date)) %>%
filter(date <= start.fcast.date + months(24)) %>%
select(-date, -country, -d_2012, -d_2013),
burn = n.burn, iter = n.iter, g = "BRIC", mprior = "random",
nmodel = 10000, mcmc = "bd", user.int = F, randomizeTimer = F,
fixed.reg = c(year_dummy_names[-c(11,12)], country_dummy_names))
# Up to 2012 data
bma.model.synch.synch.10 = bms(synch_synch_data %>%
mutate(date = as.Date(date)) %>%
filter(date <= start.fcast.date + months(27)) %>%
select(-date, -country, -d_2013),
burn = n.burn, iter = n.iter, g = "BRIC", mprior = "random",
nmodel = 10000, mcmc = "bd", user.int = F, randomizeTimer = F,
fixed.reg = c(year_dummy_names[-c(12)], country_dummy_names))
bma.model.synch.synch.11 = bms(synch_synch_data %>%
mutate(date = as.Date(date)) %>%
filter(date <= start.fcast.date + months(30)) %>%
select(-date, -country, -d_2013),
burn = n.burn, iter = n.iter, g = "BRIC", mprior = "random",
nmodel = 10000, mcmc = "bd", user.int = F, randomizeTimer = F,
fixed.reg = c(year_dummy_names[-c(12)], country_dummy_names))
bma.model.synch.synch.12 = bms(synch_synch_data %>%
mutate(date = as.Date(date)) %>%
filter(date <= start.fcast.date + months(33)) %>%
select(-date, -country, -d_2013),
burn = n.burn, iter = n.iter, g = "BRIC", mprior = "random",
nmodel = 10000, mcmc = "bd", user.int = F, randomizeTimer = F,
fixed.reg = c(year_dummy_names[-c(12)], country_dummy_names))
bma.model.synch.synch.13 = bms(synch_synch_data %>%
mutate(date = as.Date(date)) %>%
filter(date <= start.fcast.date + months(36)) %>%
select(-date, -country, -d_2013),
burn = n.burn, iter = n.iter, g = "BRIC", mprior = "random",
nmodel = 10000, mcmc = "bd", user.int = F, randomizeTimer = F,
fixed.reg = c(year_dummy_names[-c(12)], country_dummy_names))
# Up to 2013 data
bma.model.synch.synch.14 = bms(synch_synch_data %>%
mutate(date = as.Date(date)) %>%
filter(date <= start.fcast.date + months(39)) %>%
select(-date, -country),
burn = n.burn, iter = n.iter, g = "BRIC", mprior = "random",
nmodel = 10000, mcmc = "bd", user.int = F, randomizeTimer = F,
fixed.reg = c(year_dummy_names, country_dummy_names))
bma.model.synch.synch.15 = bms(synch_synch_data %>%
mutate(date = as.Date(date)) %>%
filter(date <= start.fcast.date + months(42)) %>%
select(-date, -country),
burn = n.burn, iter = n.iter, g = "BRIC", mprior = "random",
nmodel = 10000, mcmc = "bd", user.int = F, randomizeTimer = F,
fixed.reg = c(year_dummy_names, country_dummy_names))
bma.model.synch.synch.16 = bms(synch_synch_data %>%
mutate(date = as.Date(date)) %>%
filter(date <= start.fcast.date + months(45)) %>%
select(-date, -country),
burn = n.burn, iter = n.iter, g = "BRIC", mprior = "random",
nmodel = 10000, mcmc = "bd", user.int = F, randomizeTimer = F,
fixed.reg = c(year_dummy_names, country_dummy_names))
# Create the forecasts #
# Find indices of certain variables because not all used for prediction #
f_synch_index = which( colnames(bma.synch.levels.forecast.data)=="f_synch" ) # Get the column number of the preallocated forecast
country_index = which( colnames(bma.synch.levels.forecast.data)=="country" )
synch_index = which( colnames(bma.synch.levels.forecast.data)=="synch" )
date_index = which( colnames(bma.synch.levels.forecast.data)=="date" )
d_2009_index = which( colnames(bma.synch.levels.forecast.data)=="d_2009" )
d_2010_index = which( colnames(bma.synch.levels.forecast.data)=="d_2010" )
d_2011_index = which( colnames(bma.synch.levels.forecast.data)=="d_2011" )
d_2012_index = which( colnames(bma.synch.levels.forecast.data)=="d_2012" )
d_2013_index = which( colnames(bma.synch.levels.forecast.data)=="d_2013" )
# Arrange by country and date for consistency for both models
bma.synch.levels.forecast.data = bma.synch.levels.forecast.data %>%
arrange(country,date)
bma.synch.synch.forecast.data = bma.synch.synch.forecast.data %>%
arrange(country, date)
# Populate the forecasted values for synch-levels and synch-synch
# First sequence: seq(2,204,17)
# Second sequence: seq(3,204,17) and so on
len.seq = dim(bma.synch.levels.forecast.data)[1] /
length(unique(bma.synch.levels.forecast.data$country))
final.seq = dim(bma.synch.levels.forecast.data)[1]
# Populate the BMA datasets
bma.synch.levels.forecast.data = populate.bma(bma.synch.levels.forecast.data, f_synch_index, country_index, synch_index, date_index,
d_2010_index, d_2011_index, d_2012_index, d_2013_index)
bma.synch.synch.forecast.data = populate.bma(bma.synch.synch.forecast.data, f_synch_index, country_index, synch_index, date_index,
d_2010_index, d_2011_index, d_2012_index, d_2013_index)
# Make the final plots
plot.fcast(bma.synch.levels.forecast.data)
ggsave("plots/fcast_synch_levels.eps", width = 8, height = 6, units = "in", device = cairo_ps)
plot.fcast(bma.synch.synch.forecast.data)
ggsave("plots/fcast_synch_synch.eps", width = 8, height = 6, units = "in", device = cairo_ps)
# Code to check variables with PIP > 50%
synch.levels.list = list(bma.model.synch.levels.1,
bma.model.synch.levels.2,
bma.model.synch.levels.3,
bma.model.synch.levels.4,
bma.model.synch.levels.5,
bma.model.synch.levels.6,
bma.model.synch.levels.7,
bma.model.synch.levels.8,
bma.model.synch.levels.9,
bma.model.synch.levels.10,
bma.model.synch.levels.11,
bma.model.synch.levels.12,
bma.model.synch.levels.13,
bma.model.synch.levels.14,
bma.model.synch.levels.15,
bma.model.synch.levels.16)
synch.synch.list = list(bma.model.synch.synch.1,
bma.model.synch.synch.2,
bma.model.synch.synch.3,
bma.model.synch.synch.4,
bma.model.synch.synch.5,
bma.model.synch.synch.6,
bma.model.synch.synch.7,
bma.model.synch.synch.8,
bma.model.synch.synch.9,
bma.model.synch.synch.10,
bma.model.synch.synch.11,
bma.model.synch.synch.12,
bma.model.synch.synch.13,
bma.model.synch.synch.14,
bma.model.synch.synch.15,
bma.model.synch.synch.16)
cat("\014")
for (catmodel in c("levels", "synch")) {
for (jj in 1:16) {
current.model = paste0("bma.model.synch", "." , catmodel, ".", jj)
check.pip = as.data.frame(coef(eval(sym(current.model))))
check.pip = check.pip %>%
filter(PIP>=.5)
check.pip = check.pip %>%
filter(!(row.names(check.pip) %in% country_dummy_names),
!(row.names(check.pip) %in% year_dummy_names))
print(cat(sort(rownames(check.pip))))
}
}
# Once we get the variables with PIP > 50%, now it's time to build the models with variables PIP > 50%
# SYNCH - LEVELS #
synch_levels_data_pip = read_excel(file.path(data_path, "synch_levels.xlsx")) %>%
mutate(date = as.Date(date)) %>%
filter(date <= as.Date("2013-10-01"),
!country %in% c("slovakia")) %>%
select(!contains("zlb"))
synch_levels_data_pip = synch_levels_data_pip %>%
select(-uncert,-bop,-debttogdp,-gdp,-euribor,-inflation) %>%
mutate(d_belgium = ifelse(country == "belgium", 1 , 0),
d_finland = ifelse(country == "finland", 1 , 0),
d_france = ifelse(country == "france", 1 , 0),
d_germany = ifelse(country == "germany", 1 , 0),
d_greece = ifelse(country == "greece", 1 , 0),
d_ireland = ifelse(country == "ireland", 1 , 0),
d_italy = ifelse(country == "italy", 1 , 0),
d_netherlands = ifelse(country == "netherlands", 1 , 0),
d_portugal = ifelse(country == "portugal", 1 , 0),
d_spain = ifelse(country == "spain", 1 , 0),
d_slovenia = ifelse(country == "slovenia", 1 , 0)) %>%
mutate(d_2002 = ifelse(year == 2002, 1 , 0),
d_2003 = ifelse(year == 2003, 1 , 0),
d_2004 = ifelse(year == 2004, 1 , 0),
d_2005 = ifelse(year == 2005, 1 , 0),
d_2006 = ifelse(year == 2006, 1 , 0),
d_2007 = ifelse(year == 2007, 1 , 0),
d_2008 = ifelse(year == 2008, 1 , 0),
d_2009 = ifelse(year == 2009, 1 , 0),
d_2010 = ifelse(year == 2010, 1 , 0),
d_2011 = ifelse(year == 2011, 1 , 0),
d_2012 = ifelse(year == 2012, 1 , 0),
d_2013 = ifelse(year == 2013, 1 , 0)) %>%
select(-year, -pigs)
# Create the dataset
synch_levels_pip_forecast_data = synch_levels_data_pip %>%
filter(date >= as.Date("2009-10-01"))
synch_levels_pip_forecast_data = complete(synch_levels_pip_forecast_data, country, date) %>%
mutate(f_synch = NA)
# Create all the AR models #
# We need in total 8 models (we use up until the last_obs - 1 to forecast)
ar.synch.levels.pip50.1 = lm(synch ~ country + recsynch_lag4 + synch_lag1 + d_2002+ d_2003+ d_2004+ d_2005+ d_2006+ d_2007+
d_2008+ d_2009, data = synch_levels_data_pip %>%
filter(date <= "2009-10-01"))
ar.synch.levels.pip50.2 = lm(synch ~  country  + pigsgdp_lag4 + recsynch_lag1 + synch_lag1 + d_2002+ d_2003+ d_2004+ d_2005+ d_2006+ d_2007+
d_2008+ d_2009+ d_2010, data = synch_levels_data_pip %>%
mutate(date = as.Date(date)) %>%
filter(date <= "2010-01-01"))
ar.synch.levels.pip50.3 = lm(synch ~  country  + pigsgdp_lag4 + recsynch_lag1 + synch_lag1 + d_2002+ d_2003+ d_2004+ d_2005+ d_2006+ d_2007+
d_2008+ d_2009+ d_2010, data = synch_levels_data_pip %>%
mutate(date = as.Date(date)) %>%
filter(date <= "2010-04-01"))
ar.synch.levels.pip50.4 = lm(synch ~  country  + pigsgdp_lag4 + recsynch_lag1 + synch_lag1 + d_2002+ d_2003+ d_2004+ d_2005+ d_2006+ d_2007+
d_2008+ d_2009+ d_2010, data = synch_levels_data_pip %>%
mutate(date = as.Date(date)) %>%
filter(date <= "2010-07-01"))
ar.synch.levels.pip50.5 = lm(synch ~ country + pigsgdp_lag4 + recsynch_lag1 + recsynch_lag3 +
recsynch_lag4 + synch_lag1 + d_2002+ d_2003+ d_2004+ d_2005+ d_2006+ d_2007+
d_2008+ d_2009+ d_2010, data = synch_levels_data_pip %>%
mutate(date = as.Date(date)) %>%
filter(date <= as.Date("2010-10-01")))
ar.synch.levels.pip50.6 = lm(synch ~ country + pigsgdp_lag4 + recsynch_lag1 + recsynch_lag3 +
recsynch_lag4 + synch_lag1 + d_2002+ d_2003+ d_2004+ d_2005+ d_2006+ d_2007+
d_2008+ d_2009+ d_2010 + d_2011, data = synch_levels_data_pip %>%
mutate(date = as.Date(date)) %>%
filter(date <= as.Date("2011-01-01")))
ar.synch.levels.pip50.7 = lm(synch ~ country + pigsgdp_lag4 + recsynch_lag1 + recsynch_lag3 +
recsynch_lag4 + synch_lag1 + d_2002+ d_2003+ d_2004+ d_2005+ d_2006+ d_2007+
d_2008+ d_2009+ d_2010 + d_2011, data = synch_levels_data_pip %>%
mutate(date = as.Date(date)) %>%
filter(date <= as.Date("2011-04-01")))
ar.synch.levels.pip50.8 = lm(synch ~ country + pigsgdp_lag4 + recsynch_lag1 + recsynch_lag3 +
recsynch_lag4 + synch_lag1 + d_2002+ d_2003+ d_2004+ d_2005+ d_2006+ d_2007+
d_2008+ d_2009+ d_2010 + d_2011, data = synch_levels_data_pip %>%
mutate(date = as.Date(date)) %>%
filter(date <= as.Date("2011-07-01")))
ar.synch.levels.pip50.9 = lm(synch ~ country + pigsgdp_lag4 + recsynch_lag1 + recsynch_lag3 +
recsynch_lag4 + synch_lag1 + d_2002+ d_2003+ d_2004+ d_2005+ d_2006+ d_2007+
d_2008+ d_2009+ d_2010 + d_2011, data = synch_levels_data_pip %>%
mutate(date = as.Date(date)) %>%
filter(date <= as.Date("2011-10-01")))
ar.synch.levels.pip50.10 = lm(synch ~ country + pigsgdp_lag4 + recsynch_lag1 + recsynch_lag3 +
recsynch_lag4 + synch_lag1 + d_2002+ d_2003+ d_2004+ d_2005+ d_2006+ d_2007+
d_2008+ d_2009+ d_2010 + d_2011 + d_2012, data = synch_levels_data_pip %>%
mutate(date = as.Date(date)) %>%
filter(date <= as.Date("2012-01-01")))
ar.synch.levels.pip50.11 = lm(synch ~ country + pigsgdp_lag4 + recsynch_lag1 + recsynch_lag3 +
recsynch_lag4 + synch_lag1 + d_2002+ d_2003+ d_2004+ d_2005+ d_2006+ d_2007+
d_2008+ d_2009+ d_2010 + d_2011 + d_2012, data = synch_levels_data_pip %>%
mutate(date = as.Date(date)) %>%
filter(date <= as.Date("2012-04-01")))
ar.synch.levels.pip50.12 = lm(synch ~ country + pigsgdp_lag4 + recsynch_lag1 + recsynch_lag3 +
recsynch_lag4 + synch_lag1 + d_2002+ d_2003+ d_2004+ d_2005+ d_2006+ d_2007+
d_2008+ d_2009+ d_2010 + d_2011 + d_2012, data = synch_levels_data_pip %>%
mutate(date = as.Date(date)) %>%
filter(date <= as.Date("2012-07-01")))
ar.synch.levels.pip50.13 = lm(synch ~ country + pigsgdp_lag4 + recsynch_lag1 + recsynch_lag3 +
recsynch_lag4 + synch_lag1 + d_2002+ d_2003+ d_2004+ d_2005+ d_2006+ d_2007+
d_2008+ d_2009+ d_2010 + d_2011 + d_2012, data = synch_levels_data_pip %>%
mutate(date = as.Date(date)) %>%
filter(date <= as.Date("2012-10-01")))
ar.synch.levels.pip50.14 = lm(synch ~ country + pigsgdp_lag4 + recsynch_lag1 + recsynch_lag3 +
recsynch_lag4 + synch_lag1 + d_2002+ d_2003+ d_2004+ d_2005+ d_2006+ d_2007+
d_2008+ d_2009+ d_2010 + d_2011 + d_2012 + d_2013, data = synch_levels_data_pip %>%
mutate(date = as.Date(date)) %>%
filter(date <= as.Date("2013-01-01")))
ar.synch.levels.pip50.15 = lm(synch ~ country + pigsgdp_lag4 + recsynch_lag1 + recsynch_lag3 +
recsynch_lag4 + synch_lag1 + d_2002+ d_2003+ d_2004+ d_2005+ d_2006+ d_2007+
d_2008+ d_2009+ d_2010 + d_2011 + d_2012 + d_2013, data = synch_levels_data_pip %>%
mutate(date = as.Date(date)) %>%
filter(date <= as.Date("2013-04-01")))
ar.synch.levels.pip50.16 = lm(synch ~ country + pigsgdp_lag4 + recsynch_lag1 + recsynch_lag3 +
recsynch_lag4 + synch_lag1 + d_2002+ d_2003+ d_2004+ d_2005+ d_2006+ d_2007+
d_2008+ d_2009+ d_2010 + d_2011 + d_2012 + d_2013, data = synch_levels_data_pip %>%
mutate(date = as.Date(date)) %>%
filter(date <= as.Date("2013-07-01")))
# Generate now the predictions
for (mm in 1:dim(synch_levels_pip_forecast_data)[1]) {
if (mm %in% seq(2,final.seq,len.seq)) {
synch_levels_pip_forecast_data[mm,f_synch_index] =
predict(ar.synch.levels.pip50.1, newdata = synch_levels_pip_forecast_data[mm,c("recsynch_lag4", "synch_lag1", "country", year_dummy_names[1:8])])
}
if (mm %in% seq(3,final.seq,len.seq)) {
synch_levels_pip_forecast_data[mm,f_synch_index] =
predict(ar.synch.levels.pip50.2, newdata = synch_levels_pip_forecast_data[mm,c("pigsgdp_lag4", "recsynch_lag1", "synch_lag1", "country", year_dummy_names[1:9])])
}
if (mm %in% seq(4,final.seq,len.seq)) {
synch_levels_pip_forecast_data[mm,f_synch_index] =
predict(ar.synch.levels.pip50.3, newdata = synch_levels_pip_forecast_data[mm,c("pigsgdp_lag4", "recsynch_lag1", "synch_lag1", "country", year_dummy_names[1:9])])
}
if (mm %in% seq(5,final.seq,len.seq)) {
synch_levels_pip_forecast_data[mm,f_synch_index] =
predict(ar.synch.levels.pip50.4, newdata = synch_levels_pip_forecast_data[mm,c("pigsgdp_lag4", "recsynch_lag1", "synch_lag1", "country", year_dummy_names[1:9])])
}
if (mm %in% seq(6,final.seq,len.seq)) {
synch_levels_pip_forecast_data[mm,f_synch_index] =
predict(ar.synch.levels.pip50.5, newdata = synch_levels_pip_forecast_data[mm,c("pigsgdp_lag4", "recsynch_lag1", "recsynch_lag3", "recsynch_lag4", "synch_lag1", "country", year_dummy_names[1:9])])
}
if (mm %in% seq(7,final.seq,len.seq)) {
synch_levels_pip_forecast_data[mm,f_synch_index] =
predict(ar.synch.levels.pip50.6, newdata = synch_levels_pip_forecast_data[mm,c("pigsgdp_lag4", "recsynch_lag1", "recsynch_lag3", "recsynch_lag4", "synch_lag1", "country", year_dummy_names[1:10])])
}
if (mm %in% seq(8,final.seq,len.seq)) {
synch_levels_pip_forecast_data[mm,f_synch_index] =
predict(ar.synch.levels.pip50.7, newdata = synch_levels_pip_forecast_data[mm,c("pigsgdp_lag4", "recsynch_lag1", "recsynch_lag3", "recsynch_lag4", "synch_lag1", "country", year_dummy_names[1:10])])
}
if (mm %in% seq(9,final.seq,len.seq)) {
synch_levels_pip_forecast_data[mm,f_synch_index] =
predict(ar.synch.levels.pip50.8, newdata = synch_levels_pip_forecast_data[mm,c("pigsgdp_lag4", "recsynch_lag1", "recsynch_lag3", "recsynch_lag4", "synch_lag1", "country", year_dummy_names[1:10])])
}
if (mm %in% seq(10,final.seq,len.seq)) {
synch_levels_pip_forecast_data[mm,f_synch_index] =
predict(ar.synch.levels.pip50.9, newdata = synch_levels_pip_forecast_data[mm,c("pigsgdp_lag4", "recsynch_lag1", "recsynch_lag3", "recsynch_lag4", "synch_lag1", "country", year_dummy_names[1:10])])
}
if (mm %in% seq(11,final.seq,len.seq)) {
synch_levels_pip_forecast_data[mm,f_synch_index] =
predict(ar.synch.levels.pip50.10, newdata = synch_levels_pip_forecast_data[mm,c("pigsgdp_lag4", "recsynch_lag1", "recsynch_lag3", "recsynch_lag4", "synch_lag1", "country", year_dummy_names[1:11])])
}
if (mm %in% seq(12,final.seq,len.seq)) {
synch_levels_pip_forecast_data[mm,f_synch_index] =
predict(ar.synch.levels.pip50.11, newdata = synch_levels_pip_forecast_data[mm,c("pigsgdp_lag4", "recsynch_lag1", "recsynch_lag3", "recsynch_lag4", "synch_lag1", "country", year_dummy_names[1:11])])
}
if (mm %in% seq(13,final.seq,len.seq)) {
synch_levels_pip_forecast_data[mm,f_synch_index] =
predict(ar.synch.levels.pip50.12, newdata = synch_levels_pip_forecast_data[mm,c("pigsgdp_lag4", "recsynch_lag1", "recsynch_lag3", "recsynch_lag4", "synch_lag1", "country", year_dummy_names[1:11])])
}
if (mm %in% seq(14,final.seq,len.seq)) {
synch_levels_pip_forecast_data[mm,f_synch_index] =
predict(ar.synch.levels.pip50.13, newdata = synch_levels_pip_forecast_data[mm,c("pigsgdp_lag4", "recsynch_lag1", "recsynch_lag3", "recsynch_lag4", "synch_lag1", "country", year_dummy_names[1:11])])
}
if (mm %in% seq(15,final.seq,len.seq)) {
synch_levels_pip_forecast_data[mm,f_synch_index] =
predict(ar.synch.levels.pip50.14, newdata = synch_levels_pip_forecast_data[mm,c("pigsgdp_lag4", "recsynch_lag1", "recsynch_lag3", "recsynch_lag4", "synch_lag1", "country", year_dummy_names[1:12])])
}
if (mm %in% seq(16,final.seq,len.seq)) {
synch_levels_pip_forecast_data[mm,f_synch_index] =
predict(ar.synch.levels.pip50.15, newdata = synch_levels_pip_forecast_data[mm,c("pigsgdp_lag4", "recsynch_lag1", "recsynch_lag3", "recsynch_lag4", "synch_lag1", "country", year_dummy_names[1:12])])
}
if (mm %in% seq(17,final.seq,len.seq)) {
synch_levels_pip_forecast_data[mm,f_synch_index] =
predict(ar.synch.levels.pip50.16, newdata = synch_levels_pip_forecast_data[mm,c("pigsgdp_lag4", "recsynch_lag1", "recsynch_lag3", "recsynch_lag4", "synch_lag1", "country", year_dummy_names[1:12])])
}
}
synch_levels_pip_forecast_data = synch_levels_pip_forecast_data %>%
select(date, country, f_synch)
plot.fcast(synch_levels_pip_forecast_data)
ggsave("plots/fcast_synch_levels_pip.eps", width = 8, height = 6, units = "in", device = cairo_ps)
synch_synch_data_pip = read_excel(file.path(data_path, "synch_synch.xlsx")) %>%
mutate(date = as.Date(date)) %>%
filter(date <= as.Date("2013-10-01"),
!country %in% c("slovakia")) %>%
select(!contains("zlb"))
synch_synch_data_pip = read_excel(file.path(data_path, "synch_synch.xlsx")) %>%
mutate(date = as.Date(date)) %>%
filter(date <= as.Date("2013-10-01"),
!country %in% c("slovakia")) %>%
select(!contains("zlb"))
synch_synch_data_pip = synch_synch_data_pip %>%
select(-uncert,-bop,-debttogdp,-gdp,-euribor,-inflation) %>%
mutate(d_belgium = ifelse(country == "belgium", 1 , 0),
d_finland = ifelse(country == "finland", 1 , 0),
d_france = ifelse(country == "france", 1 , 0),
d_germany = ifelse(country == "germany", 1 , 0),
d_greece = ifelse(country == "greece", 1 , 0),
d_ireland = ifelse(country == "ireland", 1 , 0),
d_italy = ifelse(country == "italy", 1 , 0),
d_netherlands = ifelse(country == "netherlands", 1 , 0),
d_portugal = ifelse(country == "portugal", 1 , 0),
d_spain = ifelse(country == "spain", 1 , 0),
d_slovenia = ifelse(country == "slovenia", 1 , 0)) %>%
mutate(d_2002 = ifelse(year == 2002, 1 , 0),
d_2003 = ifelse(year == 2003, 1 , 0),
d_2004 = ifelse(year == 2004, 1 , 0),
d_2005 = ifelse(year == 2005, 1 , 0),
d_2006 = ifelse(year == 2006, 1 , 0),
d_2007 = ifelse(year == 2007, 1 , 0),
d_2008 = ifelse(year == 2008, 1 , 0),
d_2009 = ifelse(year == 2009, 1 , 0),
d_2010 = ifelse(year == 2010, 1 , 0),
d_2011 = ifelse(year == 2011, 1 , 0),
d_2012 = ifelse(year == 2012, 1 , 0),
d_2013 = ifelse(year == 2013, 1 , 0)) %>%
select(-year, -pigs)
synch_synch_pip_forecast_data = synch_synch_data_pip %>%
filter(date >= as.Date("2009-10-01"))
synch_synch_pip_forecast_data = complete(synch_synch_pip_forecast_data, country, date) %>%
mutate(f_synch = NA)
synch_synch_data_pip = read_excel(file.path(data_path, "synch_synch.xlsx")) %>%
mutate(date = as.Date(date)) %>%
filter(date <= as.Date("2013-10-01"),
!country %in% c("slovakia")) %>%
select(!contains("zlb"))
